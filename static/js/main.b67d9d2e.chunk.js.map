{"version":3,"sources":["components/BusStopSelect/BusStopSelect.tsx","components/RouteItem/LabelItem.tsx","components/RouteItem/styles.ts","components/RouteItem/RouteLeg.tsx","components/RouteItem/RouteItem.tsx","utils/routes.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["BusStopSelect","props","options","data","pysakit","Autocomplete","autoComplete","autoSelect","autoHighlight","value","selected","onChange","event","onSelect","renderInput","params","TextField","autoFocus","autofocus","label","variant","LabelItem","Typography","component","align","children","useRouteItemStyles","makeStyles","theme","legsRoot","minHeight","padding","overflow","borderTop","display","whiteSpace","position","lineLabel","textTransform","color","palette","grey","overflowX","legStart","top","left","legEnd","right","legGraph","useRouteLegStyles","legRoot","margin","maxWidth","legLine","height","marginTop","spacing","marginBottom","backgroundColor","main","legIcon","fontSize","borderWidth","borderStyle","borderColor","borderRadius","textOverflow","RouteLeg","line","lineToColor","classes","Grid","container","direction","item","className","stops","duration","Box","RouteItem","legs","legWidth","Math","floor","length","xs","map","r","key","slice","roads","lines","getDestinations","tiet","from","filter","mista","mihin","indexOf","place","kesto","getDurationMin","reduce","result","min","Infinity","filterRoutesByDuration","fastest","start","end","fastestEnd","fastestStart","routeExists","Object","values","linjastot","places","part","join","reverse","nextRoutes","routes","res","route","pop","previous","concat","durations","arr","test","last","idx","findIndex","getMatches","fromStart","fromEnd","match","find","getLines","parsed","entries","lineForward","lineBackward","getRouteParts","getLinesGetter","getMatchingKeys","keys1","keys2","k","Array","fill","v","i","orderBy","sorters","sortBy","sort","OrderType","getFullStuff","to","startPoint","endPoint","push","findRoutes","substring","fastestCompare","a","b","easiestCompare","getFastest","quantity","getEasiest","App","React","useState","startPlace","setStartPlace","stopPlace","setStopPlace","setRoutes","Fastest","order","setOrder","useEffect","method","Easiest","CssBaseline","AppBar","Toolbar","Container","mx","mt","Paper","elevation","sm","Hidden","xsDown","select","fullWidth","e","target","MenuItem","leg","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b67d9d2e.chunk.js","sourcesContent":["import { TextField } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport React from 'react';\nimport data from '../../mocks/reittiopas.json';\n\nexport type BusStopSelectProps = {\n    label: string,\n    selected: string|null,\n    autofocus?: boolean,\n    onSelect: (selected: string|null) => void,\n}\nexport default function BusStopSelect(props: BusStopSelectProps) {\n    const options: Array<string> = data.pysakit;\n    const onChange = (event: object, value: string|null) => props.onSelect(value);\n\n    return (\n        <Autocomplete\n          autoComplete\n          autoSelect\n          autoHighlight\n          options={options}\n          value={props.selected}\n          onChange={onChange}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              autoFocus={props.autofocus}\n              label={props.label}\n              variant=\"outlined\"\n            />\n          )}\n        />\n    );\n}\n\n","import { Typography } from '@material-ui/core';\nimport React from 'react';\n\nconst LabelItem: React.FC = (props) => (\n    <Typography variant=\"h4\" component=\"span\" align=\"center\">\n        {props.children}\n    </Typography>\n);\n\nexport default LabelItem;","import { makeStyles, Theme } from '@material-ui/core/styles';\n\nexport type ColorPalette = 'primary' | 'error' | 'success' | 'warning';\n\nexport type StyleProps = {\n    color: ColorPalette,\n};\n\nexport const useRouteItemStyles = makeStyles((theme: Theme) => ({\n    legsRoot: {\n        minHeight: 100,\n        padding: '1em .7em .5em',\n        overflow: 'hidden',\n        borderTop: '1px solid #ddd',\n        display: 'flex',\n        whiteSpace: 'nowrap',\n        position: 'relative',\n    },\n    lineLabel: {\n        textTransform: 'uppercase',\n        color: theme.palette.grey[600],\n        overflowX: 'hidden',\n    },\n    legStart: {\n        position: 'absolute',\n        top: 20,\n        left: -8,\n    },\n    legEnd: {\n        position: 'absolute',\n        top: 20,\n        right: 12,\n    },\n    legGraph: {\n        position: 'relative',\n        padding: '2px 40px 0 20px',\n    },\n}));\n\nexport const useRouteLegStyles = makeStyles((theme: Theme) => ({\n    legRoot: {\n        margin: 1,\n        maxWidth: '100%',\n    },\n    legLine: (props: StyleProps) => ({\n        position: 'relative',\n        height: 20,\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        backgroundColor: theme.palette[props.color].main,\n    }),\n    legIcon: (props: StyleProps) => ({\n        position: 'absolute',\n        fontSize: '2em',\n        left: 6,\n        top: -4,\n        backgroundColor: 'rgba(255, 255, 255, 0.9)',\n        borderWidth: 1,\n        borderStyle: 'solid',\n        borderColor: theme.palette[props.color].main,\n        borderRadius: 3,\n    }),\n    lineLabel: {\n        textTransform: 'uppercase',\n        color: theme.palette.grey[600],\n        overflowX: 'hidden',\n        maxWidth: '100%',\n        textOverflow: 'ellipsis',\n    },\n}));","import { Box, Grid } from '@material-ui/core';\nimport BusIcon from '@material-ui/icons/DirectionsBus';\nimport React from 'react';\nimport { IRouteLeg } from '../../utils/routes';\nimport { ColorPalette, useRouteLegStyles } from './styles';\n\nconst lineToColor = (line: string): ColorPalette => {\n    switch (line) {\n        case 'vihreä':\n            return 'success';\n        case 'punainen':\n            return 'error';\n        case 'keltainen':\n            return 'warning';\n        case 'sininen':\n        default:\n            return 'primary';\n    }\n}\n\nexport default function RouteLeg(props: IRouteLeg) {\n    const color = lineToColor(props.line);\n    const classes = useRouteLegStyles({ color });\n\n    return (\n        <Grid container direction=\"column\">\n            <Grid item container className={classes.lineLabel}>\n                {`${props.stops}: ${props.duration}`}\n            </Grid>\n            <Grid className={classes.legRoot} item>\n                <Box color={`${color}.main`}>\n                    <div className={classes.legLine}>\n                        <BusIcon className={classes.legIcon} />\n                    </div>\n                </Box>\n            </Grid>\n            <Grid className={classes.lineLabel} item>{props.line}</Grid>\n        </Grid>\n    )\n}\n","import { Box, Grid } from '@material-ui/core';\nimport React from 'react';\nimport { IRouteLeg } from '../../utils/routes';\nimport LabelItem from './LabelItem';\nimport RouteLeg from './RouteLeg';\nimport { useRouteItemStyles } from './styles';\n\nexport type RouteItemProps = {\n    duration: number,\n    legs: Array<IRouteLeg>,\n};\n\nexport default function RouteItem(props: RouteItemProps) {\n    const classes = useRouteItemStyles();\n    const { legs, duration } = props;\n    const legWidth = Math.floor(12 / legs.length) as 1 | 6 | 4 | 3 | 10 | 2 | 5 | 7 | 8 | 9 | 11 | 12;\n\n    return (\n        <Box color=\"primary.main\">\n            <Grid container spacing={1} className={classes.legsRoot}>\n                <Grid item xs={10}>\n                    <div className={classes.legGraph}>\n                        <div className={classes.legStart}>\n                            <LabelItem>{legs[0].stops[0]}</LabelItem>\n                        </div>\n                        <Grid container>\n                            {legs.map((r: IRouteLeg) => (\n                                <Grid key={r.stops} item xs={legWidth}>\n                                    <RouteLeg {...r} />\n                                </Grid>\n                            ))}\n                        </Grid>\n                        <div className={classes.legEnd}>\n                            <LabelItem>{legs[legs.length - 1].stops.slice(-1)}</LabelItem>\n                        </div>\n                    </div>\n                </Grid>\n                <Grid item xs={2}>\n                    <div className={classes.lineLabel}>Kesto</div>\n                    <LabelItem>{duration}</LabelItem>\n                </Grid>\n            </Grid>\n        </Box>\n    );\n}\n","import data from '../mocks/reittiopas.json';\n\ninterface ITie {\n    mista: string,\n    mihin: string,\n    kesto: number,\n}\n\ninterface ILinjastot {\n    [name: string]: Array<string>,\n}\n\ninterface IData {\n    pysakit: Array<string>,\n    tiet: Array<ITie>,\n    linjastot: ILinjastot,\n}\n\ninterface IRoutePart {\n    places: Array<string>,\n    durations: Array<number>,\n    duration: number,\n}\n\ninterface IDestination {\n    place: string,\n    duration: number,\n}\n\ninterface IRouteStops {\n    stops: string,\n    duration: number,\n}\n\ninterface IRoutePartOptions extends IRouteStops {\n    lines: Array<string>,\n}\n\nexport interface IRouteLeg extends IRouteStops {\n    line: string,\n}\n\nexport interface IRoute {\n    legs: Array<IRouteLeg>,\n    duration: number,\n}\n\nconst getDestinationsGetter = (roads: Array<ITie>) => (from: string): Array<IDestination> => roads\n    .filter(r => [r.mista, r.mihin].indexOf(from) !== -1)\n    .map(r => ({ place: r.mista === from ? r.mihin : r.mista, duration: r.kesto }));\n\nconst getDestinations = getDestinationsGetter(data.tiet);\n\nconst getDurationMin = (legs: Array<IRoutePart>): number => legs.reduce((result: number, r: IRoutePart) => Math.min(result, r.duration), Infinity);\n\nconst filterRoutesByDuration = (fastest: number, start: Array<IRoutePart>, end: Array<IRoutePart>) => {\n    const fastestEnd = getDurationMin(end);\n    const fastestStart = getDurationMin(start);\n    return {\n        start: start.filter(r => r.duration + fastestEnd < fastest),\n        end: end.filter(r => r.duration + fastestStart < fastest),\n    };\n};\n\nconst routeExistsGetter = (lines: Array<Array<string>>) => (...places: Array<string>) => {\n    const part = places.join()\n    return lines.reduce((result, line) => {\n        return result || line.join().indexOf(part) !== -1 || line.reverse().join().indexOf(part) !== -1\n    }, false);\n}\n\nconst routeExists = routeExistsGetter(Object.values(data.linjastot));\n\nconst hasDuplicates = (arr: Array<string>) => /.*(.).*\\1{1,}/.test(arr.join(''))\n\nconst nextRoutes = (routes: Array<IRoutePart>, fastest: number) => routes\n    .reduce((res: Array<IRoutePart>, route) => {\n        const start = route.places.slice(-1).pop();\n        const previous = route.places.slice(-2, -1).pop();\n        return res.concat(getDestinations(start!)\n            .filter(r => r.place !== previous)\n            .filter(r => routeExists(start!, r.place))\n            .map(r => ({\n                places: route.places.concat(r.place),\n                duration: route.duration + r.duration,\n                durations: route.durations.concat(r.duration),\n            })));\n    }, [])\n    .filter(r => r.duration < fastest)\n    // Prevent loops\n    .filter(r => !hasDuplicates(r.places))\n    .reduce((res: Array<IRoutePart>, route) => {\n        const last = route.places.slice(-1).pop();\n        const idx = res.findIndex(r => r.places.slice(-1).pop() === last);\n        if (idx !== -1) {\n            if (res[idx].duration > route.duration) {\n                res[idx] = route;\n            }\n\n            return res;\n        }\n        return res.concat(route);\n    }, []);\n\nconst getMatches = (fromStart: Array<IRoutePart>, fromEnd: Array<IRoutePart>) => fromStart\n    .reduce((res: Array<IRoutePart>, route: IRoutePart) => {\n        const last = route.places.slice(-1).pop();\n        const match = fromEnd.find(r => r.places.slice(-1).pop() === last);\n        if (!match) {\n            return res;\n        }\n\n        return res.concat({\n            places: route.places.concat(match.places.slice(0, -1).reverse()),\n            durations: route.durations.concat(match.durations.slice().reverse()),\n            duration: match.duration + route.duration,\n        })\n    }, []);\n\nconst findRoutes = (startPoint: string, endPoint: string) => {\n    let fromStart: Array<IRoutePart> = [{ places: [startPoint], durations: [], duration: 0 }];\n    let fromEnd: Array<IRoutePart> = [{ places: [endPoint], durations: [], duration: 0 }];\n\n\n    const result: Array<IRoutePart> = []\n    result.push(...getMatches(fromStart, fromEnd));\n\n    do {\n        fromStart = nextRoutes(fromStart, getDurationMin(result));\n        result.push(...getMatches(fromStart, fromEnd));\n        fromEnd = nextRoutes(fromEnd, getDurationMin(result));\n        result.push(...getMatches(fromStart, fromEnd));\n\n        const { start, end } = filterRoutesByDuration(getDurationMin(result), fromStart, fromEnd);\n        fromStart = start;\n        fromEnd = end;\n    }  while (fromStart.length > 0 && fromEnd.length > 0);\n\n    return result;\n}\n\nconst getLinesGetter = (lines: ILinjastot) => {\n    const parsed = Object.entries(lines)\n        .map(([key, places]) => ({\n            key,\n            lineForward: places.join(),\n            lineBackward: places.slice().reverse().join(),\n        }));\n    return (route: Array<string>, durations: Array<number>) => getRouteParts(route)\n        .map((stops: string, idx): IRoutePartOptions => ({\n            stops,\n            duration: durations[idx],\n            lines: parsed.reduce((result: Array<string>, { key, lineForward, lineBackward }) => {\n                const stopsInLine = lineForward.indexOf(stops) !== -1 || lineBackward.indexOf(stops) !== -1;\n                return stopsInLine ? result.concat(key) : result;\n            }, []),\n        }));\n}\nconst getLines = getLinesGetter(data.linjastot);\n\nconst getLeastSwitches = (legs: Array<IRoutePartOptions>) => legs.slice(1)\n    .reduce((result, item) => {\n        const previous = result.slice(-1).pop();\n        const lines = getMatchingKeys(previous!.lines, item.lines);\n\n        if (lines.length > 0){\n            result[result.length - 1] = {\n                stops: `${previous!.stops}${item.stops.substring(1)}`,\n                duration: previous!.duration + item.duration,\n                lines,\n            };\n            return result;\n        }\n\n        return result.concat(item);\n    }, legs.slice(0, 1))\n    .map(({ stops, duration, lines}): IRouteLeg => ({ stops, duration, line: lines[0] }));\n\nconst getMatchingKeys = (keys1: Array<string>, keys2: Array<string>) => {\n    return keys1.filter(k => keys2.indexOf(k) !== -1);\n};\n\nconst getRouteParts = (arr: Array<string>) => Array(arr.length - 1).fill('').map((v, i) => arr.slice(i, i + 2).join());\n\nfunction orderBy<T>(arr: Array<T>, ...sorters: Array<(a: T, b: T) => 0 | 1 | -1>) {\n    return sorters.reduce((result, sortBy) => {\n        result.sort(sortBy);\n        return result;\n    }, arr.slice());\n}\n\nconst getFullStuff = (from: string, to: string): Array<IRoute> =>\n    findRoutes(from, to).map(({ duration, places, durations }) => ({\n        duration,\n        legs: getLeastSwitches(getLines(places, durations))\n    }));\n\nconst fastestCompare = (a: IRoute, b: IRoute) => a.duration < b.duration ? -1 : 1;\nconst easiestCompare = (a: IRoute, b: IRoute) => a.legs.length < b.legs.length ? -1 : 1;\nexport const getFastest = (from: string, to: string, quantity = 1) => orderBy(getFullStuff(from, to), easiestCompare, fastestCompare).slice(0, quantity);\nexport const getEasiest = (from: string, to: string, quantity = 1) => orderBy(getFullStuff(from, to), fastestCompare, easiestCompare).slice(0, quantity);\n","import { AppBar, Box, Container, CssBaseline, Grid, Hidden, MenuItem, Paper, TextField, Toolbar, Typography } from '@material-ui/core';\nimport React from 'react';\nimport BusStopSelect from './components/BusStopSelect';\nimport RouteItem from './components/RouteItem';\nimport { getFastest, getEasiest, IRoute } from './utils/routes';\n\nexport enum OrderType {\n    Fastest,\n    Easiest,\n}\n\nconst toKey = (route: IRoute) => route.legs.reduce((res: string, leg) => `${res},${leg.stops}`, '');\n\nexport default function App() {\n    const [startPlace, setStartPlace] = React.useState<string | null>(null);\n    const [stopPlace, setStopPlace] = React.useState<string | null>(null);\n    const [routes, setRoutes] = React.useState<Array<IRoute>>([]);\n    const [order, setOrder] = React.useState<OrderType>(OrderType.Fastest);\n\n    const onOrderChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setOrder(+e.target.value);\n    };\n\n    React.useEffect(() => {\n        if (startPlace && stopPlace && startPlace !== stopPlace) {\n            const method = order === OrderType.Easiest ? getEasiest : getFastest;\n            setRoutes(method(startPlace, stopPlace, 3));\n        }\n    }, [startPlace, stopPlace, order])\n\n    return (\n        <>\n            <CssBaseline />\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\">\n                        Reittiopas\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Container maxWidth=\"lg\">\n                <Box mx={-2} mt={1}>\n                    <Paper elevation={3}>\n                        <Box padding={2}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12} sm={4}>\n                                    <BusStopSelect\n                                        label=\"Alkupysäkki\"\n                                        selected={startPlace}\n                                        onSelect={setStartPlace}\n                                        autofocus\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={4}>\n                                    <BusStopSelect\n                                        label=\"Loppupysäkki\"\n                                        selected={stopPlace}\n                                        onSelect={setStopPlace}\n                                    />\n                                </Grid>\n                                <Hidden xsDown>\n                                    <Grid item sm={4}>\n                                        <TextField select fullWidth\n                                            variant=\"outlined\"\n                                            value={order}\n                                            onChange={onOrderChange}\n                                        >\n                                            <MenuItem value={OrderType.Fastest}>Nopein</MenuItem>\n                                            <MenuItem value={OrderType.Easiest}>Vähiten vaihtoja</MenuItem>\n                                        </TextField>\n                                    </Grid>\n                                </Hidden>\n                            </Grid>\n                        </Box>\n                        <Box padding={2}>\n                            {routes.map(r => (\n                                <RouteItem\n                                    key={toKey(r)}\n                                    duration={r.duration}\n                                    legs={r.legs}\n                                />\n                            ))}\n                        </Box>\n                    </Paper>\n                </Box>\n            </Container>\n        </>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}